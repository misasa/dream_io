#!/usr/bin/env python
import bluetooth
import threading
import time
import socket
import yaml
import re
import sys
import os

class echoThread(threading.Thread):
    def __init__(self, sock, client_info, tcp_address, tcp_port):
        threading.Thread.__init__(self)
        self.sock = sock
        self.client_info = client_info
        self.tcp_port = tcp_port
        self.tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.tcp_socket.connect((tcp_address, tcp_port))

    def run(self):
        buffer = ''
        try:
            while True:
                data = self.sock.recv(2048)
                if len(data) == 0: break
                buffer = buffer + data
                if re.search(r'\n', buffer):
                    chunk = buffer.rstrip()
                    print self.client_info, ": received [%s]" % chunk
                    #print self.client_info, self.tcp_port, ": received [%s]" % chunk
                    self.tcp_socket.send(chunk + '\r\n')
                    buffer = ''
        except IOError:
            pass
        self.sock.close()
        #self.tcp_socket.close()
        print self.client_info, ": disconnected"
        


class server(threading.Thread):
    def __init__(self, tcp_port):
        sys.path.insert(0,os.getcwd())

        name = "BluetoothChat"
        uuid = "fa87c0d0-afac-11de-8a39-0800200c9a66"
        service_classes = [ uuid, bluetooth.SERIAL_PORT_CLASS ]
        profiles = [ bluetooth.SERIAL_PORT_PROFILE ]
        server_sock = bluetooth.BluetoothSocket( bluetooth.RFCOMM )
        server_sock.bind(("", bluetooth.PORT_ANY))
        server_sock.listen(1)
        port = server_sock.getsockname()[1]
        bluetooth.advertise_service( server_sock, name, uuid, service_classes, profiles)
        print "Waiting for connection on RFCOMM channel %d" % port
        threading.Thread.__init__(self)
        self.setDaemon(True)
	self.tcp_port = tcp_port
        self.i = 0
        self.server_sock = server_sock

    def run(self):
        print "Start."
        while True:
            client_sock, client_info = self.server_sock.accept()
            print client_info, ": connection accepted"
	    bt_address = re.sub(':','',client_info[0]);
            #tcp_port =7000 
	    tcp_address = socket.gethostbyname('localhost') 
            #print tcp_address, tcp_port, ": connecting ..."
            echo = echoThread(client_sock, client_info, tcp_address, self.tcp_port)
            echo.setDaemon(True)
            echo.start()

if __name__ == '__main__':
    if (len(sys.argv) != 2):
      print 'Usage: # rfcomm-server-sdp 7000'
      quit()

    port = int(sys.argv[1])
    cr = server(port)
    cr.start()
    time.sleep(30000)

    cr.server_sock.close()
    print "all done"
